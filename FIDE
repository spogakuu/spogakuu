ALTER TABLE PUBLIC_ATTR_TRNS_SRH_ALTID_QDATA_ALT
  ADD COLUMN is_kmk   BOOLEAN,
  ADD COLUMN is_sdl   BOOLEAN,
  ADD COLUMN is_isin  BOOLEAN,
  ADD COLUMN is_cusip BOOLEAN;

UPDATE PUBLIC_ATTR_TRNS_SRH_ALTID_QDATA_ALT
SET
  is_kmk   = kmk_registered_entity_id   IS NOT NULL,
  is_sdl   = sdl_registered_entity_id   IS NOT NULL,
  is_isin  = isin_registered_entity_id  IS NOT NULL,
  is_cusip = cusip_registered_entity_id IS NOT NULL;

CREATE OR REPLACE TABLE SECURITY_REFERENCE_UPDATES AS
CREATE OR REPLACE TABLE SECURITY_REFERENCE_UPDATES AS


CREATE OR REPLACE TABLE SECURITY_REFERENCE_UPDATES AS

CREATE OR REPLACE TABLE SECURITY_REFERENCE_UPDATES AS

WITH updates AS (
  SELECT
    -- key columns (never NULL)
    tgt.registered_entity_id,
    tgt.effective_dt,

    ----------------------------------------------------------------
    -- 1) old vs. new values, null‐defaulted for display:
    ----------------------------------------------------------------
    NVL(TO_VARCHAR(tgt.public_registered_entity_id), 'NA')       AS old_pub_reg_ent_id,
    NVL(TO_VARCHAR(src.public_registered_entity_id), 'NA')       AS new_pub_reg_ent_id,

    NVL(tgt.public_issuer_bus_ent_id, -1)                         AS old_pub_bus_ent_id,
    NVL(src.public_issuer_bus_ent_id, -1)                         AS new_pub_bus_ent_id,

    NVL(tgt.public_issuer_bus_ent_type_cd, 'NA')                 AS old_pub_bus_ent_type_cd,
    NVL(src.public_issuer_bus_ent_type_cd, 'NA')                 AS new_pub_bus_ent_type_cd,

    NVL(tgt.public_issuer_bus_ent_short_desc, 'NA')              AS old_pub_bus_ent_short_desc,
    NVL(src.public_issuer_bus_ent_short_desc, 'NA')              AS new_pub_bus_ent_short_desc,

    NVL(tgt.public_issuer_bus_ent_long_desc, 'NA')               AS old_pub_bus_ent_long_desc,
    NVL(src.public_issuer_bus_ent_long_desc, 'NA')               AS new_pub_bus_ent_long_desc,

    NVL(tgt.public_issuer_bus_ent_fmr_id, -1)                     AS old_pub_bus_ent_fmr_id,
    NVL(src.public_issuer_bus_ent_fmr_id, -1)                     AS new_pub_bus_ent_fmr_id,

    NVL(tgt.public_issuer_cusip, 'NA')                            AS old_pub_issuer_cusip,
    NVL(src.public_issuer_cusip, 'NA')                            AS new_pub_issuer_cusip,

    NVL(tgt.public_equity_cusip, 'NA')                            AS old_pub_equity_cusip,
    NVL(src.public_equity_cusip, 'NA')                            AS new_pub_equity_cusip,

    NVL(tgt.public_equity_isin, 'NA')                             AS old_pub_equity_isin,
    NVL(src.public_equity_isin, 'NA')                             AS new_pub_equity_isin,

    ----------------------------------------------------------------
    -- 2) vendor flags (unchanged)
    ----------------------------------------------------------------
    src.is_kmk,
    src.is_sdl,
    src.is_isin,
    src.is_cusip,

    ----------------------------------------------------------------
    -- 3) single category pick (unchanged)
    ----------------------------------------------------------------
    CASE
      WHEN src.is_kmk   THEN 'KMK'
      WHEN src.is_sdl   THEN 'SDL'
      WHEN src.is_isin  THEN 'ISIN'
      WHEN src.is_cusip THEN 'CUSIP'
      ELSE               'UNKNOWN'
    END AS category_used,

    ----------------------------------------------------------------
    -- 4) which columns changed?  null‐safe, pipe‐delimited
    ----------------------------------------------------------------
    CONCAT_WS('|',
      CASE
        WHEN NVL(src.public_registered_entity_id,   'NA')
           <> NVL(tgt.public_registered_entity_id,   'NA')
        THEN 'PUBLIC_REGISTERED_ENTITY_ID'
      END,
      CASE
        WHEN NVL(src.public_issuer_bus_ent_id,       -1)
           <> NVL(tgt.public_issuer_bus_ent_id,       -1)
        THEN 'PUBLIC_ISSUER_BUS_ENT_ID'
      END,
      CASE
        WHEN NVL(src.public_issuer_bus_ent_type_cd,  'NA')
           <> NVL(tgt.public_issuer_bus_ent_type_cd,  'NA')
        THEN 'PUBLIC_ISSUER_BUS_ENT_TYPE_CD'
      END,
      CASE
        WHEN NVL(src.public_issuer_bus_ent_short_desc, 'NA')
           <> NVL(tgt.public_issuer_bus_ent_short_desc, 'NA')
        THEN 'PUBLIC_ISSUER_BUS_ENT_SHORT_DESC'
      END,
      CASE
        WHEN NVL(src.public_issuer_bus_ent_long_desc,  'NA')
           <> NVL(tgt.public_issuer_bus_ent_long_desc,  'NA')
        THEN 'PUBLIC_ISSUER_BUS_ENT_LONG_DESC'
      END,
      CASE
        WHEN NVL(src.public_issuer_bus_ent_fmr_id,     -1)
           <> NVL(tgt.public_issuer_bus_ent_fmr_id,     -1)
        THEN 'PUBLIC_ISSUER_BUS_ENT_FMR_ID'
      END,
      CASE
        WHEN NVL(src.public_issuer_cusip,             'NA')
           <> NVL(tgt.public_issuer_cusip,             'NA')
        THEN 'PUBLIC_ISSUER_CUSIP'
      END,
      CASE
        WHEN NVL(src.public_equity_cusip,             'NA')
           <> NVL(tgt.public_equity_cusip,             'NA')
        THEN 'PUBLIC_EQUITY_CUSIP'
      END,
      CASE
        WHEN NVL(src.public_equity_isin,              'NA')
           <> NVL(tgt.public_equity_isin,              'NA')
        THEN 'PUBLIC_EQUITY_ISIN'
      END
    ) AS fields_changed

  FROM SECURITY_REFERENCE_HISTORY_BASE AS tgt
  JOIN PUBLIC_ATTR_TRNS_SRH_ALTID_QDATA_ALT AS src
    ON tgt.registered_entity_id = src.registered_entity_id
   AND tgt.effective_dt         = src.effective_dt

  -- still only rows where the two MD5 hashes differ
  WHERE src.md5_src <> src.md5_tgt
)

SELECT
  registered_entity_id,
  effective_dt,
  category_used,
  fields_changed,

  old_pub_reg_ent_id,        new_pub_reg_ent_id,
  old_pub_bus_ent_id,        new_pub_bus_ent_id,
  old_pub_bus_ent_type_cd,   new_pub_bus_ent_type_cd,
  old_pub_bus_ent_short_desc, new_pub_bus_ent_short_desc,
  old_pub_bus_ent_long_desc,  new_pub_bus_ent_long_desc,
  old_pub_bus_ent_fmr_id,     new_pub_bus_ent_fmr_id,
  old_pub_issuer_cusip,       new_pub_issuer_cusip,
  old_pub_equity_cusip,       new_pub_equity_cusip,
  old_pub_equity_isin,        new_pub_equity_isin

FROM updates
-- only keep rows where at least one field actually changed
WHERE fields_changed IS NOT NULL
  AND fields_changed <> ''
ORDER BY registered_entity_id, effective_dt;



