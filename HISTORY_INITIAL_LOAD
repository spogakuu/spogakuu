from pyspark.sql import SparkSession
from pyspark.sql.functions import col, sha2, concat_ws, when, lit

# -------------------------
# CONFIGURATION — CHANGE THESE ONLY
# -------------------------
SOURCE_TABLE = ""
TARGET_TABLE = ""
TEMP_TABLE = TARGET_TABLE + "_TEMP"
FLAG_VALUE = "A"  # Set to 'I', 'U', or 'D' as needed
# -------------------------

# Initialize Spark
spark = SparkSession.builder.appName("History Snapshot Load").getOrCreate()
spark.conf.set("spark.sql.session.timeZone", "UTC")

# Function to prepare the snapshot table
def prepare_history_snapshot(df, flag_value):
    # Cast utctimestamp to string
    if "utctimestamp" in df.columns:
        df = df.withColumn("utctimestamp", col("utctimestamp").cast("string"))

    # Add 'flag' column
    df = df.withColumn("flag", lit(flag_value))

    # Create null-safe string-casted version of all columns for hashing
    cleaned_cols = []
    for field in df.schema.fields:
        col_name = field.name
        cleaned_col = when(col(col_name).isNull(), lit(" ")).otherwise(col(col_name).cast("string"))
        cleaned_cols.append(cleaned_col.alias(col_name))

    temp_df = df.select(*cleaned_cols)
    row_hash_col = sha2(concat_ws("||", *temp_df.columns), 256).alias("ROW_HASH")

    return df.withColumn("ROW_HASH", row_hash_col)

# Load → Transform → Write Temp → Rename to Final
try:
    print(f"\nSTART processing: {SOURCE_TABLE}")

    # Read source data
    df = spark.read.table(SOURCE_TABLE)

    # Transform: cast utctimestamp, add flag, and hash
    df_final = prepare_history_snapshot(df, FLAG_VALUE).coalesce(1)

    # Drop temp table if exists
    spark.sql(f"DROP TABLE IF EXISTS {TEMP_TABLE}")

    # Write to temp table
    df_final.write.mode("overwrite").saveAsTable(TEMP_TABLE)

    # Replace target table atomically
    spark.sql(f"DROP TABLE IF EXISTS {TARGET_TABLE}")
    spark.sql(f"ALTER TABLE {TEMP_TABLE} RENAME TO {TARGET_TABLE}")

    print(f"SUCCESS: {TARGET_TABLE} created with ROW_HASH, flag='{FLAG_VALUE}', and utctimestamp as string")

except Exception as e:
    print(f"FAILED: {e}")
